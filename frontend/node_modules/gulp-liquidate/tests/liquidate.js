#!/usr/bin/nodejs
/* jshint node:true, mocha:true */

/*
 * @author Xunnamius
 *
 * gulp-liquidate BDD unit tests
 */

"use strict";

const Promise = require('bluebird');
const through = require('through2');
const expects = require('chai').use(require('chai-as-promised')).expect;

const gulp = require('gulp');

const path = require('path');
const fixtures = glob => path.join(__dirname, 'fixtures', glob);

const liquidate = require('../');

describe('gulp-liquify', () =>
{
    describe('<in streaming mode>', () =>
    {
        it('emits error when using streaming mode for file input (no buffer)', done =>
        {
            gulp.src(fixtures('*.liquid'), { buffer: false })
                .pipe(liquidate({}))
                .on('error', err =>
                {
                    expects(err.message).to.equal("streaming is not supported (it doesn't make sense here)");
                    done();
                });
        });
    });

    describe('<in buffered mode>', () =>
    {
        it('emits error when no valid compile strategy found', done =>
        {
            gulp.src(fixtures('*.liquid'))
                .pipe(liquidate({}, { compileStrategy: [] }))
                .on('error', err =>
                {
                    expects(err.message).to.equal('no valid compile strategy found (see documentation)');
                    done();
                });
        });

        it('emits a simple liquid template', done =>
        {
            gulp.src(fixtures('test.liquid'))
                .pipe(liquidate({ name: 'Mark' }))
                .on('data', data =>
                {
                    let results = data.contents.toString();

                    expects(results).to.equal('Hi, my name is Mark.\n');
                    done();
                });
        });

        it('is capable of including other liquid templates', done =>
        {
            gulp.src(fixtures('include.liquid'))
                .pipe(liquidate({ name: 'Mark' }))
                .on('data', data =>
                {
                    let results = data.contents.toString();

                    expects(results).to.equal('<p>Hi, my name is Mark.\n</p>\n');
                    done();
                });
        });

        it('respects file.context when passed from upstream', done =>
        {
            gulp.src(fixtures('passed.liquid'))
                .pipe(through.obj((file, enc, cb) =>
                {
                    file.context = { name: 'Malik' };
                    cb(null, file);
                }))
                .pipe(liquidate({ name: 'Mark' }))
                .on('data', data =>
                {
                    let results = data.contents.toString();

                    expects(results).to.equal('Hi, my name is Malik.\n');
                    done();
                });
        });

        describe('#getActiveEngine()', () =>
        {
            it('returns the internal engine of the default compile strategy as expected', () =>
            {
                expects(liquidate.getActiveEngine())
                    .to.equal(liquidate.CompileStrategy.defaultCompileStrategy.getActiveEngine());
            });
        });
    });
});
