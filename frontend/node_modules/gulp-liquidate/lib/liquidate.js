#!/usr/bin/nodejs
/* jshint node:true, mocha:true */

/*
 * @author Xunnamius
 *
 * @require CompileStrategy/CompileStrategy
 * @require CompileStrategy/DummyCompileStrategy
 * @require CompileStrategy/ShopifyLiquidCompileStrategy
 *
 * Entry point for the library
 */

"use strict";

const PLUGIN_NAME = 'gulp-liquidate';

const through = require('through2');

const PluginError = require('gulp-util').PluginError;

const CompileStrategy = require('./CompileStrategy/CompileStrategy');
const DummyCompileStrategy = require('./CompileStrategy/DummyCompileStrategy');
const ShopifyLiquidCompileStrategy = require('./CompileStrategy/ShopifyLiquidCompileStrategy');

/**
 * Gulp plugin gulp-liquidate main method.
 *
 * **Note: You can add a context property onto a file object somewhere upstream
 * and its contents will be respected by gulp-liquidate downstream as context.**
 * Further note that contexts when passed this way overwrite contexts passed
 * in through the plugin main function itself.
 *
 * @param  {Object} [context] The scope of vars to be passed during compilation
 * @param  {Object} [options] An optional set of options for compilation
 *
 * @return {Stream}
 */
let gulpLiquidate = (context, options) =>
{
    context = context || {};
    options = Object.assign({
        compileStrategy: gulpLiquidate.CompileStrategy.defaultCompileStrategy
    }, options);

    // Create a stream through which each file will pass
    return through.obj(function(file, enc, cb)
    {
        if(file.isNull())
            return cb(null, file); // Return empty file

        if(file.isStream())
            this.emit('error', new PluginError(PLUGIN_NAME, "streaming is not supported (it doesn't make sense here)"));

        if(!(options.compileStrategy instanceof CompileStrategy))
            this.emit('error', new PluginError(PLUGIN_NAME, "no valid compile strategy found (see documentation)"));

        // XXX: I specifically chose not to clone the context object; may revise

        // Consider any file-specific contexts
        if(file.context)
            Object.assign(context, file.context);

        options.compileStrategy.compile(file.contents.toString('utf-8'), context)
               .then(output => {
                   file.contents = new Buffer(output, 'utf-8');
                   this.push(file);
                   return cb();
               })
               .catch(err => {
                   this.emit('error', err);
                   return cb();
               });
    });
};

/**
 * @name gulpLiquidate.getActiveEngine
 * @method
 * @global
 * 
 * @description The `gulpLiquidate.getActiveEngine()` method will return the
 * default internal Liquid compiler "engine" instance.
 *
 * @returns {Object} The default internal Liquid compiler "engine" instance
 */
gulpLiquidate.getActiveEngine = () => gulpLiquidate.CompileStrategy.defaultCompileStrategy.getActiveEngine();

////////////////////////////////////////////////////
// Make it easy to access some default strategies //
////////////////////////////////////////////////////

/**
 * `CompileStrategy` class, accessible under `gulpLiquidate.CompileStrategy`.
 *
 * @external
 * @type Class:CompileStrategy
 */
gulpLiquidate.CompileStrategy = CompileStrategy;

/**
 * `DummyCompileStrategy` class, accessible under
 * `gulpLiquidate.CompileStrategy.DummyCompileStrategy`.
 *
 * @external
 * @type Class:DummyCompileStrategy
 */
gulpLiquidate.CompileStrategy.DummyCompileStrategy = DummyCompileStrategy;

/**
 * The current `defaultCompileStrategy`, accessible and mutatable under 
 * `gulpLiquidate.CompileStrategy.defaultCompileStrategy`. It is an instance of
 * DummyCompileStrategy by default unless the npm `shopify-liquid` optional
 * package is available, in which case it is an instance of
 * ShopifyLiquidCompileStrategy.
 *
 * You can set this to whatever you so desire, bearing in mind that any object
 * instance set that does not have `CompileStrategy` as an ancestor will result in
 * an error.
 *
 * @external
 * @type {CompileStrategy}
 */
gulpLiquidate.CompileStrategy.defaultCompileStrategy = new DummyCompileStrategy();

try
{
    let engine = require('shopify-liquid')({ strict_filters: true });

    /**
     * `ShopifyLiquidCompileStrategy` class, accessible under
     * `gulpLiquidate.CompileStrategy.ShopifyLiquidCompileStrategy`. This class
     * only becomes available when the npm `shopify-liquid` optional package is
     * also available.
     *
     * @external
     * @type Class:ShopifyLiquidCompileStrategy
     */
    gulpLiquidate.CompileStrategy.ShopifyLiquidCompileStrategy = ShopifyLiquidCompileStrategy;

    gulpLiquidate.CompileStrategy.defaultCompileStrategy = new ShopifyLiquidCompileStrategy(engine);
}

catch(e){} // No Shopify-Liquid?

// Export the plugin main function
module.exports = gulpLiquidate;
