#!/usr/bin/nodejs
/* jshint node:true, devel:true */

/*
 * @author Xunnamius
 */

"use strict";

/**
 * CompileStrategy interface for dealing with different ways of compiling
 * Liquid templates and the myriad compilers that implement them.
 */
class CompileStrategy
{
    /**
     * The compile method accepts raw text (a string) as an input and outputs
     * the result of the text compiled against a specific Liquid compiler.
     *
     * @param {String} raw     The text to compile
     * @param {Object} context Any local variables that should be passed into
     * the compilation engine
     *
     * @returns {Promise} A promise that resolves into the compiled
     * result (a string)
     *
     * @throws {ReferenceError} If this class is instantiated directly and not
     * properly subclassed
     */
    compile(raw, context)
    {
        throw new ReferenceError('the method "compile" is not implemented');
    }

    /**
     * The getActiveEngine method will return the default internal Liquid
     * compiler "engine" instance.
     *
     * @returns {Object} the default internal Liquid compiler "engine" instance
     *
     * @throws {ReferenceError} If this class is instantiated directly and not
     * properly subclassed
     */
    getActiveEngine()
    {
        throw new ReferenceError('the method "getActiveEngine" is not implemented');
    }
}

module.exports = CompileStrategy;
